Meeting on Thursday, February 14th, 2019
Write-Up written by: Stephen Kaplan
Others involved in meeting: Mike Gecawicz, Carsyn Viles, Spencer Ward, Will Robertson

The meeting started with the goal of developing personas and a target audience for Friend Finder. As the meeting went on, though, we discovered that this was too broad of a goal, especially when we are still exploring the identity of Friend Finder itself.

To make sure that Carsyn was up to speed, Mike asked her what she thought Friend Finder is.  Carsyn began describing the project in broad terms, asking questions along the way. I had already discussed the project with her recently, so her understanding was mostly accurate. At first she didn't know if we intended to use a wearable of some sort, but we explained that we are. When describing Friend Finder to people in the future we will need to be very clear about basic concepts like this, so realizing that I had failed to explain that before was beneficial.

Carsyn continued to describe her understanding of the project. She said that it "Gives you an indication of connecting between you, yourself, and someone else" and that it "works by proximity–once you get in certain range of someone who shares a connection with you it will let you know." Although a bit crude, these were effective descriptions of the overall concept from the standpoint of what the device will do. Carsyn went on to explain how the software side is also involved. She said, "The app is the individualistic part of the whole idea; it's the part where you establish yourself. Your job is to indicate what about yourself you want the device to focus on when looking to match with other people." Again, this was a very effective description of the app's purpose.

Carsyn mentioned something about the app being "Personalizable," which likely meant that it allows you to define yourself in specific terms, but I will seek clarification. She also mentioned the weighted matching system we were thinking of and agreed that it was a good approach, at least for a first attempt. For reference, the weighted matching system was originally described as follows:

As far as the algorithm goes, I've made a separate Processing sketch containing a multidimensional array containing categories, subcategories, topics, and individual items. Two "responses" (in the form of a string literal) can be set to any item within the array. The program then uses the items' positions within the arrays to determine a distance between them. For example, "Manga" and "Anime" are right next to each other within the same topic, so the distance between them is very small – the program identifies a 95% match. "Dancers" and "Sports", on the other hand, are in different topics and subtopics (although still in the same category of Arts & Entertainment), so the distance between them is large – the program identifies a 20% match.

This algorithm has not yet been applied to the Swift app, but the core ideas will remain the same. The data will come from a different source (Firebase), but finding the distance between items will follow the same train of thought.

Lastly, Carsyn reasoned that there should be a "less abrasive indication for low quality connections," which brings into question how much of a match (in terms of percentage) needs to be had for a high, medium, or low quality connection.

After this, we started to delve into what Friend Finder could be, what the problems are with it, and what the reason is behind the understanding we've all come to. We started with defining what problem Friend Finder is looking to solve. Initially, I had written down the following:

There is no way to know if you share an interest with someone unless you talk to them. When people do talk to each other, there is no guarantee that they share interests, making for inefficient social exchanges with undesirable outcomes. It is difficult to find people who are open to talking with you as well as who you have a common interest with. 

But Mike didn't think this was entirely accurate. Focusing on interests is too specific, as people can have common interests and be very poor matches for each other. What I had an accurate description of what friend finder does, but the actual problem it solves is loss of opportunity. Mike said, "The opportunity to find connection is lost through no fault of people; instead it is left to the ambiguity of people. We as individuals do not know what people like." This definitely sounds better, but it leaves a lot of questions, so it's likely not the final form of the problem.

From this, we realized that Friend Finder has a much broader scope than we initially thought. Features like allowing people to build their own database make it more of a platform that will grow in purpose and usability over time. As an example of the custom databases, conferences or conventions may desire a specific subset of options relevant to their content. A gaming convention may wish to provide people with a way to find a perfect opponent in a particular game. Variance in the dataset becomes the definition of the application. Of course, the feasibility of this has not been fully thought-out, but it's important that we realize that our initial approach is not the only one. Because of this, we reasoned that multiple case studies would be needed over time, akin to how one might approach case studies for Facebook. There are so many different features of Facebook, i.e. games, messaging, shopping, weather, etc., that making a single case study for all of them wouldn't produce a complete picture. Sure, a case study for the overall concept of Facebook as a multipurpose social hub would be useful, but looking at the individual features (which, in many ways are full-fledged apps and platforms within themselves) would give much more insight into how each feature works. Both approaches yield useful information.


The initial concept of Facebook was a likely single use case for the platform (Talking to people), and other features like Facebook MarketPlace weren't even envisioned at the time. By making the platform initially, though, they were able to see what was successful and then expanded on that over time. Similarly, if we dive into Friend Finder with the knowledge of it as a platform for further creation, we can focus on making one possible example of that platform's use–interest matching. Although we technically did come full circle, we now have a reasoning behind why interest matching is a reasonable place to start.

At this point, Carsyn asked what the reasoning was behind using a wearable RF device to communicate vs. other methods of communication using phones. Mike's response was that we "Need to be able to connect at a certain distance and pass data seamlessly without needing to pair the device." We haven't really tested other methods, but our research suggests that determining relative distance is much more accurate using RF than using GPS. It might be worth looking into other methods in the future, but for now RF is the most accessible method.


We then started to discuss possible issues we would face. The first was the question of how we'd handle multiple people matching at the same time. One possible solution suggested by Mike was that it's simply based on distance, which would require very specific measurement. The match who is the closest to you, by even the smallest amount, would be the one ultimately presented. I questioned what would happen if two people were exactly the same distance away, which I know would be rare but it is still a concern. We could just randomize the matching at that point, but we quickly decided that this wasn't the best solution. We questioned whether we aim to establish a strong connection between two individuals or increase the likelihood of a successful match, meaning matching to multiple people at a time. Again looking at Friend Finder as a platform, there are some situations where matching with a group of people might be desired. Spencer joined the conversation at this point and we immediately asked him how he'd handle the situation. He saw validity to both sides.

We discussed the possibility of providing options to select how matches are handled on a per-database basis. This would solve some problems, as it would allow for different interactions depending on the context, but it wouldn't solve the problem of matching two people at the same time. If we enabled users to choose whether they want to connect to multiple people or just one, though, it would add a slight degree of complexity but would ultimately improve the experience. Our reasoning for this was that there may be two people who are a perfect match in terms of interests, but one is extroverted and one is introverted. The extroverted one wants to meet with a group of people, perhaps to get multiple friends or perhaps because of safety concerns, while the introverted one would prefer meeting face-to-face. By enabling the user to opt-in or out of multiple matches, we avoid low quality experiences as neither person is forced into a situation they don't want to be in. Conversely, if their interests are an absolutely perfect match, does that outweigh their differences in personality? We decided no, but ultimately this is something we have to explore in greater detail.